Implement the method map, which accepts a linked list (head) and a mapping function, and returns a new linked list (head) where every element is the result of applying the given mapping method to each element of the original list.

Make sure you do not modify the original list!

For example: Given the list: 1 -> 2 -> 3, and the mapping function x => x * 2, map should return 2 -> 4 -> 6

The linked list is defined as follows:

function Node(data, next = null) {
  this.data = data;
  this.next = next;
}
Note: the list may be null and can hold any type of value.
//---------------------------------------------------------------------------

// function map(head, f) {
//   if(head == null) {
//     return null
//   }
//   var arr = head.next(function(data) {
//     data = null;
//   })
//   
//   return arr;
// }

function map(head, f) {
  if (head == null) return null;
  return new Node(f(head.data), map(head.next, f));
}

function map(head, f) {
  if (!head) return null;
  let temp = null;
  let list;
  let current = head;
  while(current) {
    if (!temp) {
      temp = new Node(f(current.data));
      list = temp;
    }
    else {
      temp.next = new Node(f(current.data));
      temp = temp.next  
    }
    current =  current.next
  }
  
  return list;
}
