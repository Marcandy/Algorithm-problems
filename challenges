/* Write a function called 'findInArray' that takes in two parameters, the first representing the array to be searched and the second representing the value to be searched for. Return true if the value exists in the array. If it doesn't exist return false. */


function findInArray(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if(arr.indexOf(val) > -1) {
      return true;
    }
    else {
      return false;
    }
  }
}
------------------------------------------------

function fizzBuzz(num) {
	for (var i = 1; i <= num; i++) {
		if (i % 5 === 0 && i % 3 === 0) {
			console.log("fizzBuzz");
		}
		else if (i % 5 === 0) {
			console.log("Buzz");
		}
		else if (i % 3 === 0) {
			console.log("Fizz");
		}
		else {
			console.log(i);
		}
	}
}
 
fizzBuzz(15);
----------------------------------------------------------

var text = 'outside'; 
function logIt(){
    console.log(text);
    var text = 'inside';
};
logIt()

The basic answer is that the var statement is "hoisted". Javascript takes any "var" statements that aren't at the top of scope and magically/annoyingly moves them to the top of that scope while not also hoisting the assignment. What you've written above is the equivalent of:

var text = 'outside'; 
function logIt(){
    var text;
    console.log(text);
    text = 'inside';
};
logIt();


So by the time you console.log(text), you've already added a new, undefined variable to the logIt() function scope, that would be used instead of the text variable outside its scope.

-------------------------------------------------------------------

var bank = {
	addUnreasonableFees: function(account, amount) {
		
	}
}

bank["5"] = {
	money: "0",
	acctNumber: "5",
	type: "checking",
	withdraw: function(amt) {
		bank["5"].money =bank["5"].money + amt;
	},
	deposit: function(amt) {
	    bank['5'].money = bank['5'].money + amt;
	},
	close: function() {
		console.log(bank[5].money)
	},
	checkAmount: function() {
		console.log("account has " + bank["5"].money)
	}
} 

bank["5"].deposit(20);
bank["5"].checkAmount();
bank["5"].withdraw(10);
bank["5"].checkAmount();
