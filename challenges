/* Write a function called 'findInArray' that takes in two parameters, the first representing the array to be searched and 
the second representing the value to be searched for. Return true if the value exists in the array. If it doesn't exist 
return false. */


function findInArray(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if(arr.indexOf(val) > -1) {
      return true;
    }
    else {
      return false;
    }
  }
}
------------------------------------------------

function fizzBuzz(num) {
	for (var i = 1; i <= num; i++) {
		if (i % 5 === 0 && i % 3 === 0) {
			console.log("fizzBuzz");
		}
		else if (i % 5 === 0) {
			console.log("Buzz");
		}
		else if (i % 3 === 0) {
			console.log("Fizz");
		}
		else {
			console.log(i);
		}
	}
}
 
fizzBuzz(15);
----------------------------------------------------------

var text = 'outside'; 
function logIt(){
    console.log(text);
    var text = 'inside';
};
logIt()

The basic answer is that the var statement is "hoisted". Javascript takes any "var" statements that aren't at the top of scope and magically/annoyingly moves them to the top of that scope while not also hoisting the assignment. What you've written above is the equivalent of:

var text = 'outside'; 
function logIt(){
    var text;
    console.log(text);
    text = 'inside';
};
logIt();


So by the time you console.log(text), you've already added a new, undefined variable to the logIt() function scope, that would be used instead of the text variable outside its scope.

-------------------------------------------------------------------

//Make a bank

var bank = {
	addUnreasonableFees: function(account, amount) {
		
	}
}

bank["5"] = {
	money: "0",
	acctNumber: "5",
	type: "checking",
	withdraw: function(amt) {
		bank["5"].money =bank["5"].money + amt;
	},
	deposit: function(amt) {
	    bank['5'].money = bank['5'].money + amt;
	},
	close: function() {
		console.log(bank[5].money)
	},
	checkAmount: function() {
		console.log("account has " + bank["5"].money)
	}
} 

bank["5"].deposit(20);
bank["5"].checkAmount();
bank["5"].withdraw(10);
bank["5"].checkAmount();
-----------------------------------------------------------------------------
Write a function that takes in an array of numbers and determines whether those numbers are in order
function ordered(arr) {
	// Code here
	var prevNum = 0;
	var outOfOrder = 0;
	arr.forEach(function(x, i){
		if (arr[i] < prevNum) {
			outOfOrder = 1;
		}
		prevNum = x;
	});
	
	if (outOfOrder === 1) {
		return false;
	} else {
		return true;
	}
}
 ordered( [4, 9, 12, 12, 52, 22, 56] );
 
 // Anothe solution
 function ordered( arr ) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] > arr[i + 1]) {
            return false;
        }
    }
    return true;
}


*
CALL
func.call()
When is it invoked:  Immediately
How handle params: arguemnts 2+ are passed in
What does it return: undefined

APPLY
func.apply()
When is it invoked: Immediately
How handle params: 2nd parameter is an array that is passed in 1 at a time
What does it return: undefined

BIND
var newFunc = func.bind(context)
newFunc(param1, param2, 3, "13134")
When is it invoked: not Immediately
How handle params: it doesn't, don't give it params
What does it return: new function
The new function, takes in params, and is when it is invoked
*/
-------------------------------------------------------
//Build a bank constructor Function
function Bank(accountNumber, ownerName, balance){
//It needs an account number, and owner name, and a balance.
	this.accountNumber = accountNumber;
	this.ownerName = ownerName;
	this.balance = balance;
//Give it methods to add and withdraw from the balance
	this.add = function(amount){
		this.balance += amount;
	}
	this.withdraw = function(amount){
		this.balance -= amount;
	}
//Give it a method to log the remaining balance for the owner name
	this.log = function(){
		console.log(this.ownerName + " has a remaining balance of " + this.balance);
	}
//Make 2 accounts and manipulate their balances.
}

var acct1 = new Bank(1, "Joe", 0);
acct1.add(1304813512);

var acct2 = new Bank(2, "Ryan", 0);
acct2.add(13513515);
acct2.withdraw(135205);
//-------------------------------------------------
function Animal(type, numLegs, sound){
	//this = {}
		//Store the variables
		this.type = type;
		this.legs = numLegs;
		this.sound = sound;
		//Make a sound method
		this.makeSound = function(){
			console.log("the " + this.type + " says " + this.sound);
		};
		this.run = function(){
			console.log("the " + this.type + " runs on " + this.legs + " legs")
		}
		//Make a run method
	//return this
}

var zebra = new Animal('Zebra', 4, 'whoop whoop')
zebra.run();
zebra.makeSound();

var monkey = new Animal('Monkey', 2, 'Oooo Oooo')
//--------------------------------------------------------
//Create a dog object that has hungry, tired, playful = 0
var dog = {
	hungry: 0,
	tired: 0,
	playful: 0,
	//Create the methods on that object : play, eat, sleep
	play: function(){
		//The play method decreases playful by 30 (Never less than 0), and increases hungry by 20 and tired by 10, 
		this.playful = this.playful - 30;
		if(this.playful < 0 ) this.playful = 0;
		this.hungry = this.hungry + 20;
		this.tired = this.tired + 10;
	},
	eat: function(){
		this.hungry = this.hungry - 30;
		if(this.hungry < 0 ) this.hungry = 0;
		this.tired = this.tired + 20;
	},
	sleep: function(){
		this.tired = this.tired - 30;
		if(this.tired < 0 ) this.tired = 0;
		this.playful = this.playful + 20;
	},
//Add a method that logs how hungry, tired, and playful your dog is
	log: function(){
		console.log(this.tired, this.hungry, this.playful)
	}
}

dog.play();
dog.eat();
dog.sleep();
dog.play();
dog.play();
dog.play();
dog.sleep();
dog.log();

//----------------------------------------------
Write a function that takes a number parameter 
and returns the smallest palindrome number higher than the parameter
nextPal(11) == 22
nextPal(188) == 191
nextPal(191) == 202
nextPal(2541) == 2552

function nextPal(num) {
	do {
		num++;
	}while(num !== parseInt(num.toString().split('').reverse().join('')))
	
	return num;
}

nextPal(191);
//-------------------------------------------

'anane' === 1
'adak' === 2
amazonCounting(1) // 'anane'
amazonCounting(2) // 'adak'
amazonCounting(13) // 'adak adak adak adak adak adak anane'
No trailing spaces!

function countArara(n) {
    var count = [];

    for ( var i = 2; i <= n; i += 2 ) {
      count.push("adak");
    }

    if (n % 2 !== 0) {
        count.push("anane");
    }
    
    return count.join(" ");
}
//-----------------------------------------
Given an array of integers, remove the smallest value. If there are multiple elements with the same value, remove the one with a lower index. If you get an empty array/list, return an empty array/list.

function removeSmallest(numbers) {
  var mIndex;
  var min = numbers[0];
  
  for (var i = 1; i < numbers.length; i++) {
    if (min > numbers[i]) {
      mIndex = i;
      min = numbers[i];
    }
  }
  
  numbers.splice(mIndex, 1);
  
  return numbers;
}

//---------------------------------------------
Callback are function definition

//-----------------------------------------

An isogram is a word that has no repeating letters, consecutive or non-consecutive. Implement a function that determines whether a string that contains only letters is an isogram. 
Assume the empty string is an isogram. Ignore letter case.

// function isIsogram(str) {
// 	// Code here
// 	var splitStr = str.toLowerCase().split('');
// 	for(var i = 0; i < splitStr.length; i++) {
// 		if(splitStr[i] !== splitStr[i + 1]) {
// 			return true;
// 		}
		
// 	}

// 	return false;
// }

// isIsogram("aba");
//--
function isIsogram(str) {
	// Code here
	var splitStr = str.toLowerCase().split('');
	for(var i = 0; i < splitStr.length; i++) {
		if(splitStr.lastIndexOf(splitStr[i]) !== i) {
			return false;
		}
		
	}

	return true;
}

isIsogram("aba");

//-----------------------------------------------------------------------------------
// function sumAll(arr) {
// 	//get the last Number
// 	var total= 0;
// 	for(var i = 0; i < +(arr[1] - arr[0]); i++) {
// 	total += arr[i] ;
// 	arr[i]++;
// 	}
//   	return total;
// }

// sumAll([1, 4]);

// function sumAll(arr){
// 	arr.sort(function(a,b) {return a-b;});
// 	if(arr[0]===arr[i]){
// 		return arr[0];
// 	}
// 	return arr[i] + sumAll
	
// }

function sumAll(arr) {
    var max = Math.max(arr[0], arr[1]);
    var min = Math.min(arr[0], arr[1]);
    var temp = 0;
    for (var i=min; i <= max; i++){
        temp += i;
    }
  return(temp);
}

sumAll([1, 4]);

//---------------------------------------------------------------------------------

You'll be passed an array of objects - you must sort them in descending order based on the value of an arbitrarily specified property. For example, when sorted by a, this:
Sorted:
[
  {a: 1, b: 3},
  {a: 3, b: 2},
  {a: 2, b: 40},
  {a: 4, b: 12}
]
Original:
[
  {a: 4, b: 12},
  {a: 3, b: 2},
  {a: 2, b: 40},
  {a: 1, b: 3}
]
your function must take the form function sortList (sortBy, list)
The values will always be numbers, and the properties will always exist.

function sortList( sortBy, list ) {
	// Code here
	list.sort(function(x, y){
		return x[sortBy] - y[sortBy];
	})
	
	return list;
}

sortList(a, [
  {a: 4, b: 12},
  {a: 3, b: 2},
  {a: 2, b: 40},
  {a: 1, b: 3}
]);

function removeItem(myGroceryList, remItem) {
	for(var i = 0; i < myGroceryList.length; i++){
	if(myGroceryList[i] === remItem){
		myGroceryList.splice(i, 1)
		}
	}
	return myGroceryList;
}

function addItem(myGroceryList, item) {
	for(var i = 0; i < myGroceryList.length; i++) {
		if(myGroceryList[i] === item){
			return myGroceryList;
		}
	}
	myGroceryList.push(item);
	return myGroceryList;
}
//--------------------------------------------------------------------------
var numbers = [5, '9', 16, 19, '25', '34', 48];
//Write a function called addTen that is given 'numbers' as it's only argument and returns a new
//array after adding ten to each item in numbers. *Verify your answer is correct. --> [15, 19, 26, 29, 35, 44, 58]

function addTen(numbers){
	
	for(var i = 0; i < numbers.length; i++){
		numbers[i] = parseInt(numbers[i]);
		numbers[i] += 10;
	}
	return numbers;
}


//---------------------

function sum(num1d, num2) {
	if(y !== undefined){
	 return num1 + num2;
	} 
	 else {
	 	return function(y){
	 		return x + y;
	 	}
	 }
}

sum(2, 3);
//------------------------------

function sum(num1d, num2) {
	if(y !== undefined){
	 return num1 + num2;
	} 
	 else {
	 	return function(y){
	 		return x + y;
	 	}
	 }
}

sum(2, 3);
//------------------------------------------------------------------

we want you to extend the built-in Array class with the following methods: square(), cube(), average(), sum(), even() and odd().

Explanation:
    square() must return a copy of the array, containing all values squared, the original array must not be changed
    cube() must return a copy of the array, containing all values cubed, the original array must not be changed
    average() must return the average of all array values, average() on an empty array must return NaN
    sum() must return the sum of all array values
    even() must return an array of all even numbers, the original array must not be changed
    odd() must return an array of all odd numbers, the original array must not be changed
var numbers = [1, 2, 3, 4, 5];
numbers.square(); // must return [1, 4, 9, 16, 25]
numbers.cube(); // must return [1, 8, 27, 64, 125]
numbers.average(); // must return 3
numbers.sum(); // must return 15
numbers.even(); // must return [2, 4]
numbers.odd(); // must return [1, 3, 5]

// var Array = {
// 	square: function(val){
// 		return val * val;
	
// 	},
// 	cube: function(val) {
// 		return val * val * val
// 	},
// 	average: function {
// 		return 
// 	}
// }

Array.prototype.square = function() {
	var arr = [];
	for(var i = 0; i < this.length; i++) {
		arr.push(this[i] * this[i]);
	}
	
	return arr;
}

Array.prototype.cube = function() {
	var arr = [];
	for(var i = 0; i < this.length; i++) {
		arr.push(this[i] * this[i] * this[i])
	}
	
	return arr;
}


Array.prototype.average = function() {
	var arr = [];
	for(var i = 0; i < this.length; i++) {
		arr.push((this[i] + this[i +1])/this.length)
	}
}

//dont use ng model without dot notation
//-----------------------------------------------------------------------------------------------'

/*
Write a function, which takes a non-negative integer (seconds) as input and returns the time in a human-readable format (HH:MM:SS)
    HH = hours, padded to 2 digits, range: 00 - 99
    MM = minutes, padded to 2 digits, range: 00 - 59
    SS = seconds, padded to 2 digits, range: 00 - 59
The maximum time never exceeds 359999 (99:59:59)
*/

humanReadable(0) // '00:00:00'
humanReadable(5) // '00:00:05'
humanReadable(60) // '00:01:00'
humanReadable(86399) // '23:59:59'
humanReadable(359999) // '99:59:59'

// function time(seconds) {
// 	//arr format or object format
	
// 	if(seconds <= 59 ) {
// 		return '00:00:seconds'
// 	}
// 	min = seconds % 60;
// 	hh  = min % 60;
// }

function humanReadable(input) {
	let seconds = Math.floor(input%60)
	let minutes = Math.floor(input/seconds % 60)
	let hours = Math.floor(minutes % 60)
	if(seconds < 10) {
		seconds = `0${seconds}`
	}
	if(minutes < 10) {
		hours = `0${minutes}`;
	}
	if(hours < 10) {
		hours = `0${hours}`;
	}
	if(hours < 10) {
		hours = `0${hours}`;
	}
	return `${hours}:${minutes}:${seconds}`;
}

function humanReadable(int) {
    const hours = parseInt( int / 3600 );
    const minutes = parseInt( int / 60 ) % 60;
    const seconds = int % 60;
    
    function pad(val) {
        return val < 10 ? '0' + val : val;
    }
    
    return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds);
}

/*
Write a function that takes a negative or positive integer, which represents the number of minutes 
before (-) or after (+) Sunday midnight, and returns the current day of the week and the current 
time in 24hr format ('hh:mm') as a string. 
*/

dayAndTime(0)       // should return 'Sunday 00:00'
dayAndTime(-3)      // should return 'Saturday 23:57'
dayAndTime(45)      // should return 'Sunday 00:45'
dayAndTime(759)     // should return 'Sunday 12:39'
dayAndTime(1236)    // should return 'Sunday 20:36'
dayAndTime(1447)    // should return 'Monday 00:07'
dayAndTime(7832)    // should return 'Friday 10:32'
dayAndTime(18876)   // should return 'Saturday 02:36'
dayAndTime(259180)  // should return 'Thursday 23:40' 
dayAndTime(-349000) // should return 'Tuesday 15:20'

// function dayAndTime(time) {
// 	const minutes = parseInt(time / 60) % 60;
// 	const hour = parseInt(time / 3600);
	
// 	const day = parseInt(hours / 24);
	
// 	if(day <= 24) {
// 		return 'Sunday hour: minutes';
// 	}
// 	else if (day <= 48) {
// 		return 'Saturday hour: minutes'
// 	}
// 	else if (day <= 72) {
// 		return 'Saturday hour: minutes'
// 	}
// }

function dayAndTime(min) {
	const date = new Date(0, 0, 0);
	const dayOfWeek = [Sunday, Monday, Tuesday, Wenesday, Thursday, Friday, Saturday];
	date.setTime(date.getTime + mins * 60 * 100);
		return`${dayOfWeek[date.getDay()]}
		${formatNumber(date.getHours())}:${formatNumber(date.getMinutes()};
			function formatNumber(num) {
				return(num < 10 ? '0': '') + num;
			}
		}
	}
}

function dayAndTime( minutes ) {
    var date = new Date(0, 0, 0),
      daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    date.setTime(date.getTime() + minutes * 60 * 1000);
    return `${daysOfWeek[date.getDay()]} ${formatNumber(date.getHours())}:${formatNumber(date.getMinutes())}`;
}

function formatNumber( number ) { return (number < 10 ? "0" : "") + number };

//-------------------------------------

function validParentheses(str){
    let open = 0;
    for(var i = 0; i < str.length; i++){
        if(str[i] === "("){
            open += 1;
        } else if(str[i] === ")") {
            open -=1;
        }
        if(open < 0){
            return false;
        }
    }
    return open === 0;
}

//-----------------------------------------

/*
Write a function called validParentheses that takes a string of parentheses, and determines if the order of the parentheses is valid. validParentheses should return true if the string is valid, and false if it's invalid.
Examples:
validParentheses( "()" ) => returns true
validParentheses( ")(()))" ) => returns false
validParentheses( "(" ) => returns false
validParentheses( "(())((()())())" ) => returns true 
*/

function validParentheses(str){
    let open = 0;
    for(var i = 0; i < str.length; i++){
        if(str[i] === "("){
            open += 1;
        } else if(str[i] === ")") {
            open -=1;
        }
        if(open < 0){
            return false;
        }
    }
    return open === 0;
}
//----------------------------------------------------------
// Create a function named "rotate" that takes an array and returns a new one with the elements inside rotated n spaces.
// If n is greater than 0 it should rotate the array to the right. If n is less than 0 it should rotate the array to the left. If n is 0, then it should return the array unchanged.
// */
// var data = [1, 2, 3, 4, 5];

// rotate(data, 1) // => [5, 1, 2, 3, 4]
// rotate(data, 2) // => [4, 5, 1, 2, 3]
// rotate(data, 3) // => [3, 4, 5, 1, 2]
// rotate(data, 4) // => [2, 3, 4, 5, 1]
// rotate(data, 5) // => [1, 2, 3, 4, 5]

// rotate(data, 0) // => [1, 2, 3, 4, 5]

// rotate(data, -1) // => [2, 3, 4, 5, 1]
// rotate(data, -2) // => [3, 4, 5, 1, 2]
// rotate(data, -3) // => [4, 5, 1, 2, 3]
// rotate(data, -4) // => [5, 1, 2, 3, 4]
// rotate(data, -5) // => [1, 2, 3, 4, 5]

// rotate(data, 7)     // => [4, 5, 1, 2, 3]
// rotate(data, 11)    // => [5, 1, 2, 3, 4]
// rotate(data, 12478) // => [3, 4, 5, 1, 2]

// function rotate(arr, n) {
// 	const newarr = [];
// 	for(let i = 0; i < arr.length; i++) {
// 		if(n > 0) {
// 			arr[arr.length - 1].push(newarr);
// 			return newarr;
// 		}
// 		else if(n < 0) {
// 			arr[0].unshift(newarr); 
// 		}
// 		else {
// 			return arr;
// 		}
// 	}
// }



function rotate(data, spaces) {
	let x = 0;
	
	if(spaces > 0) {
		whle(x < spaces) {
			let lastNum = data.pop();
			data.unshift(lastNum);
			x++
		}
	}
	
	if(spaces < 0) {
		whie(x > spaces) {
			let firstNum = data.shift();
			data.push(firstNum);
			x--;
		}
	}
	return data;
}


function rotate(data, n) {
	 n = n % data.length;
	 return data.slice(-n).concat(data.slice(0, -n));
}

//--------------------------------------------------------------------------------

Write a function that takes in an array of objects, each with a name property, and creates a new array
of objects based on their structure. The strings will be seperated by '/''s.

Example:

var data = [
  {
    name: 'App/AFCU/sanity'
  },
  {
    name: 'App/AFCU/product/'
  },
  {
    name: 'Mobile/somethingElse/'
  }
];

formatter( data )
//returns 
[
  {
      name: 'App'
    , children: [
        {
            name: 'AFCU'
          , children: [
              {
                name: 'sanity'
              }
              , {
                name: 'product'
              }
            ]
        }
      ]
  }
  , {
    name: 'Mobile'
    , children: [{ name: 'somethingElse' }]
  }
]

function formatter( input ) {
  function innerFormatter( string, arr ) {
    if ( string ) {
      let   strArr = string.split('/')
          , curr = strArr.shift();
      for ( let i = 0; i < arr.length; i++ ) {
        if ( arr[i].name === curr ) {
          return innerFormatter( strArr.join('/'), arr[i].children );
        }
      }
      arr.push({
          name: curr
        , children: []
      });
      return innerFormatter(strArr.join('/'), arr[arr.length - 1].children)
    }
    return arr;
  }
  let returnArr = [];
  input.forEach( string => returnArr.push(innerFormatter( string.name, returnArr )) );

  return returnArr.filter( element => element.length !== 0 );
}

//---------------------------------------------------------------------------------------

accum("abcd");    // "A-Bb-Ccc-Dddd"
accum("RqaEzty"); // "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
accum("cwAt");    // "C-Ww-Aaa-Tttt"

function accum(str) {
  let arr =str.split('');
  let output = [];
  for (var i = 0; i < arr.length; i++) {
    output.push(arr[i].toUpperCase() +Array(i+1).join(arr[i].toLowerCase()));
  }
  return output.join('-');
  
}

//----------------------------------------------------------
Your objective is to complete a recursive function reverse() that receives str as String and returns the same string in reverse order

Rules:

reverse function should be executed only N times. N = length of the input string
helper functions are not allowed
changing the signature of the function is not allowed


function reverse(str) {
    return str.length > 1 ? reverse(str.slice(1)) + str[0] : str;
}

//------------------------------------------

Let P be the Principal = 1000.00      
  Let I be the Interest Rate = 0.05      
  Let T be the Tax Rate = 0.18      
  Let D be the Desired Sum = 1100.00


After 1st Year -->
  P = 1041.00
After 2nd Year -->
  P = 1083.86
After 3rd Year -->
  P = 1128.30
Thus Mr. Scrooge has to wait for 3 years for the initial pricipal to ammount to the desired sum.

Your task is to complete the method provided and return the number of years 'Y' as a whole in order for Mr. Scrooge to get the desired sum.

Assumptions : Assume that Desired Principal 'D' is always greater than the initial principal, however it is best to take into consideration that if the Desired Principal 'D' is equal to Principal 'P' this should return 0 Years.

function calculateYears(principal, interest, tax, desired) {
    // your code
    let y = 0;
    if (principal === desired) {
    return y;
     }
     
    while(principal < desired) {  
      let accued = principal * interest;
      principal = (accued + principal) - (accued * tax);
      y++;
     }
     return y;
}

function comp(array1, array2){

  //your code here
  let count = 0;
  
 
   
  if (array1 === null || array2 === null || array1.length !== array2.length ) {
    return false;
    
  }
  
  
  
  
  for(let i = 0; i < array1.length; i++) {
  	
    for (let j = 0; j < array2.length; j++) {
    	if(array2[j] === Math.pow(array1[i], 2) ) {
       //count++;
       
    	 array2.splice(j, 1);
    	 break;
       	}
    }
 }
   if(array2.length === 0) {
   		 return true;
   }
  return false;
}

//---------------------------------------------------------------------------------------------------
Complete the method/function so that it converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized only if the original word was capitalized.

function toCamelCase(str){
  var arr = str.toLowerCase().split("");
  arr[0] = str[0];
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] === "-" || arr[i] === "_") {
      arr[i + 1] = arr[i + 1].toUpperCase();
      arr.splice(i, 1);
      i--;
    }
  }
  return arr.join("");
}

function toCamelCase(str) {
  str = str.split('');
   return str.map(function(char, i) {
    if(char === '_' || char === '-') {
    char = str[i+1].toUpperCase();
      str.splice(i+1, 1);
      
      }
      return char;
  }).join('');
}

//----------------------------------------------------------------------------------------------------------------

Oh no, our Math object was "accidently" reset. Can you re-implement some of those functions? We can assure, that only non-negative numbers are passed as arguments. So you don't have to consider things like undefined, null, NaN, negative numbers, strings and so on.

Here is a list of functions, we need:

Math.round()
Math.ceil()
Math.floor()

Math.round = function(number) {
  if(number % 1 == 0) {
    return number;
  }
   if (number % 1 < .5) {
    return parseInt(number);
  }
  
  else {
    return parseInt(number) + 1 
  }
 
};

Math.ceil = function(number) {
  if(number == parseInt(number) ) {
    return parseInt(number);
  } else {
    return parseInt(number) + 1;
  }
};

Math.floor = function(number) {
  return parseInt(number);
};

//----------------------------------------------------------------------------------------------------

// Given an obj, it can be 3 types: string, number and number array, Check whether they are symmetrical or not, 
// return a boolean value. 

  //obj=""    return true   (Empty string should return true)
  //obj="1"   return true   (one char should return true)
  //obj="11"  return true
  //obj="12"  return false
  //obj="121" return true
  //obj=1     return true   (number<10  should return true)
  //obj=-1    return false  (negative number should return false)
  //obj=10    return false
  //obj=11    return true
  //obj=12    return false
  //obj=121   return true
  //obj=[]    return true  (Empty array should return true)
  //obj=[1]   return true  (an array with one element should return true)
  //obj=[1,2,3,4,5]      return false  
  //obj=[1,2,3,2,1]      return true
  //obj=[11,12,13,12,11] return true   (left element = right element)
  //obj=[11,12,21,11]    return false  (not verify them as a string)
  
 //function symetry(obj) {
 //	//convert obj to array
 //	obj = Array.isArray(obj);
 	
 //	for(var i = 0; i < obj.length; i++) {
 //		//condition to check for duplicates
 //		if(obj[i] === obj[i + 1]) {
 			
 //		}
 //	}
 //}
 
 function checkobj(obj) {
 	
 	if(typeof obj === 'string') {
 		return obj === obj.split('').reverse().join('');	
 	}
 	
 	if(typeof Obj === 'number') {
 		return obj.toString() === obj.toString.split('').reverse().join('');
 	}
 	
 	if( Array.isArray(obj) ) {
 		return obj.join('') === obj.reverse().join('');
 	}
 }
 
 function sc(obj){
  const iterable = Array.isArray( obj ) ? obj : String( obj ).split("");
  
  for ( let i = 0, j = iterable.length - 1; i < iterable.length; i++, j-- ) {
    if ( iterable[ i ] !== iterable[ j ] ) {
      return false;
    }
  }
    return true;
}

function sc(arr) {
  if (!Array.isArray(arr)){
    arr = (arr + "").split("");
  }
  return arr + "" == arr.reverse() + "";
}
 
//-------------------------------------------------------------------

function revers(str) {
  var nstr = [];
  for (var i = str.length -1; i >= 0; i--) {
    nstr.push(str[i]);
  }
  return nstr.join('');
}

revers('boom');
