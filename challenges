/* Write a function called 'findInArray' that takes in two parameters, the first representing the array to be searched and the second representing the value to be searched for. Return true if the value exists in the array. If it doesn't exist return false. */


function findInArray(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if(arr.indexOf(val) > -1) {
      return true;
    }
    else {
      return false;
    }
  }
}
------------------------------------------------

function fizzBuzz(num) {
	for (var i = 1; i <= num; i++) {
		if (i % 5 === 0 && i % 3 === 0) {
			console.log("fizzBuzz");
		}
		else if (i % 5 === 0) {
			console.log("Buzz");
		}
		else if (i % 3 === 0) {
			console.log("Fizz");
		}
		else {
			console.log(i);
		}
	}
}
 
fizzBuzz(15);
----------------------------------------------------------

var text = 'outside'; 
function logIt(){
    console.log(text);
    var text = 'inside';
};
logIt()

The basic answer is that the var statement is "hoisted". Javascript takes any "var" statements that aren't at the top of scope and magically/annoyingly moves them to the top of that scope while not also hoisting the assignment. What you've written above is the equivalent of:

var text = 'outside'; 
function logIt(){
    var text;
    console.log(text);
    text = 'inside';
};
logIt();


So by the time you console.log(text), you've already added a new, undefined variable to the logIt() function scope, that would be used instead of the text variable outside its scope.

-------------------------------------------------------------------

//Make a bank

var bank = {
	addUnreasonableFees: function(account, amount) {
		
	}
}

bank["5"] = {
	money: "0",
	acctNumber: "5",
	type: "checking",
	withdraw: function(amt) {
		bank["5"].money =bank["5"].money + amt;
	},
	deposit: function(amt) {
	    bank['5'].money = bank['5'].money + amt;
	},
	close: function() {
		console.log(bank[5].money)
	},
	checkAmount: function() {
		console.log("account has " + bank["5"].money)
	}
} 

bank["5"].deposit(20);
bank["5"].checkAmount();
bank["5"].withdraw(10);
bank["5"].checkAmount();
-----------------------------------------------------------------------------
Write a function that takes in an array of numbers and determines whether those numbers are in order
function ordered(arr) {
	// Code here
	var prevNum = 0;
	var outOfOrder = 0;
	arr.forEach(function(x, i){
		if (arr[i] < prevNum) {
			outOfOrder = 1;
		}
		prevNum = x;
	});
	
	if (outOfOrder === 1) {
		return false;
	} else {
		return true;
	}
}
 ordered( [4, 9, 12, 12, 52, 22, 56] );
 
 // Anothe solution
 function ordered( arr ) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] > arr[i + 1]) {
            return false;
        }
    }
    return true;
}


*
CALL
func.call()
When is it invoked:  Immediately
How handle params: arguemnts 2+ are passed in
What does it return: undefined

APPLY
func.apply()
When is it invoked: Immediately
How handle params: 2nd parameter is an array that is passed in 1 at a time
What does it return: undefined

BIND
var newFunc = func.bind(context)
newFunc(param1, param2, 3, "13134")
When is it invoked: not Immediately
How handle params: it doesn't, don't give it params
What does it return: new function
The new function, takes in params, and is when it is invoked
*/
-------------------------------------------------------
//Build a bank constructor Function
function Bank(accountNumber, ownerName, balance){
//It needs an account number, and owner name, and a balance.
	this.accountNumber = accountNumber;
	this.ownerName = ownerName;
	this.balance = balance;
//Give it methods to add and withdraw from the balance
	this.add = function(amount){
		this.balance += amount;
	}
	this.withdraw = function(amount){
		this.balance -= amount;
	}
//Give it a method to log the remaining balance for the owner name
	this.log = function(){
		console.log(this.ownerName + " has a remaining balance of " + this.balance);
	}
//Make 2 accounts and manipulate their balances.
}

var acct1 = new Bank(1, "Joe", 0);
acct1.add(1304813512);

var acct2 = new Bank(2, "Ryan", 0);
acct2.add(13513515);
acct2.withdraw(135205);
