/* Write a function called 'findInArray' that takes in two parameters, the first representing the array to be searched and 
the second representing the value to be searched for. Return true if the value exists in the array. If it doesn't exist 
return false. */


function findInArray(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if(arr.indexOf(val) > -1) {
      return true;
    }
    else {
      return false;
    }
  }
}
------------------------------------------------

function fizzBuzz(num) {
	for (var i = 1; i <= num; i++) {
		if (i % 5 === 0 && i % 3 === 0) {
			console.log("fizzBuzz");
		}
		else if (i % 5 === 0) {
			console.log("Buzz");
		}
		else if (i % 3 === 0) {
			console.log("Fizz");
		}
		else {
			console.log(i);
		}
	}
}
 
fizzBuzz(15);
----------------------------------------------------------

var text = 'outside'; 
function logIt(){
    console.log(text);
    var text = 'inside';
};
logIt()

The basic answer is that the var statement is "hoisted". Javascript takes any "var" statements that aren't at the top of scope and magically/annoyingly moves them to the top of that scope while not also hoisting the assignment. What you've written above is the equivalent of:

var text = 'outside'; 
function logIt(){
    var text;
    console.log(text);
    text = 'inside';
};
logIt();


So by the time you console.log(text), you've already added a new, undefined variable to the logIt() function scope, that would be used instead of the text variable outside its scope.

-------------------------------------------------------------------

//Make a bank

var bank = {
	addUnreasonableFees: function(account, amount) {
		
	}
}

bank["5"] = {
	money: "0",
	acctNumber: "5",
	type: "checking",
	withdraw: function(amt) {
		bank["5"].money =bank["5"].money + amt;
	},
	deposit: function(amt) {
	    bank['5'].money = bank['5'].money + amt;
	},
	close: function() {
		console.log(bank[5].money)
	},
	checkAmount: function() {
		console.log("account has " + bank["5"].money)
	}
} 

bank["5"].deposit(20);
bank["5"].checkAmount();
bank["5"].withdraw(10);
bank["5"].checkAmount();
-----------------------------------------------------------------------------
Write a function that takes in an array of numbers and determines whether those numbers are in order
function ordered(arr) {
	// Code here
	var prevNum = 0;
	var outOfOrder = 0;
	arr.forEach(function(x, i){
		if (arr[i] < prevNum) {
			outOfOrder = 1;
		}
		prevNum = x;
	});
	
	if (outOfOrder === 1) {
		return false;
	} else {
		return true;
	}
}
 ordered( [4, 9, 12, 12, 52, 22, 56] );
 
 // Anothe solution
 function ordered( arr ) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] > arr[i + 1]) {
            return false;
        }
    }
    return true;
}


*
CALL
func.call()
When is it invoked:  Immediately
How handle params: arguemnts 2+ are passed in
What does it return: undefined

APPLY
func.apply()
When is it invoked: Immediately
How handle params: 2nd parameter is an array that is passed in 1 at a time
What does it return: undefined

BIND
var newFunc = func.bind(context)
newFunc(param1, param2, 3, "13134")
When is it invoked: not Immediately
How handle params: it doesn't, don't give it params
What does it return: new function
The new function, takes in params, and is when it is invoked
*/
-------------------------------------------------------
//Build a bank constructor Function
function Bank(accountNumber, ownerName, balance){
//It needs an account number, and owner name, and a balance.
	this.accountNumber = accountNumber;
	this.ownerName = ownerName;
	this.balance = balance;
//Give it methods to add and withdraw from the balance
	this.add = function(amount){
		this.balance += amount;
	}
	this.withdraw = function(amount){
		this.balance -= amount;
	}
//Give it a method to log the remaining balance for the owner name
	this.log = function(){
		console.log(this.ownerName + " has a remaining balance of " + this.balance);
	}
//Make 2 accounts and manipulate their balances.
}

var acct1 = new Bank(1, "Joe", 0);
acct1.add(1304813512);

var acct2 = new Bank(2, "Ryan", 0);
acct2.add(13513515);
acct2.withdraw(135205);
//-------------------------------------------------
function Animal(type, numLegs, sound){
	//this = {}
		//Store the variables
		this.type = type;
		this.legs = numLegs;
		this.sound = sound;
		//Make a sound method
		this.makeSound = function(){
			console.log("the " + this.type + " says " + this.sound);
		};
		this.run = function(){
			console.log("the " + this.type + " runs on " + this.legs + " legs")
		}
		//Make a run method
	//return this
}

var zebra = new Animal('Zebra', 4, 'whoop whoop')
zebra.run();
zebra.makeSound();

var monkey = new Animal('Monkey', 2, 'Oooo Oooo')
//--------------------------------------------------------
//Create a dog object that has hungry, tired, playful = 0
var dog = {
	hungry: 0,
	tired: 0,
	playful: 0,
	//Create the methods on that object : play, eat, sleep
	play: function(){
		//The play method decreases playful by 30 (Never less than 0), and increases hungry by 20 and tired by 10, 
		this.playful = this.playful - 30;
		if(this.playful < 0 ) this.playful = 0;
		this.hungry = this.hungry + 20;
		this.tired = this.tired + 10;
	},
	eat: function(){
		this.hungry = this.hungry - 30;
		if(this.hungry < 0 ) this.hungry = 0;
		this.tired = this.tired + 20;
	},
	sleep: function(){
		this.tired = this.tired - 30;
		if(this.tired < 0 ) this.tired = 0;
		this.playful = this.playful + 20;
	},
//Add a method that logs how hungry, tired, and playful your dog is
	log: function(){
		console.log(this.tired, this.hungry, this.playful)
	}
}

dog.play();
dog.eat();
dog.sleep();
dog.play();
dog.play();
dog.play();
dog.sleep();
dog.log();

//----------------------------------------------
Write a function that takes a number parameter 
and returns the smallest palindrome number higher than the parameter
nextPal(11) == 22
nextPal(188) == 191
nextPal(191) == 202
nextPal(2541) == 2552

function nextPal(num) {
	do {
		num++;
	}while(num !== parseInt(num.toString().split('').reverse().join('')))
	
	return num;
}

nextPal(191);
//-------------------------------------------

'anane' === 1
'adak' === 2
amazonCounting(1) // 'anane'
amazonCounting(2) // 'adak'
amazonCounting(13) // 'adak adak adak adak adak adak anane'
No trailing spaces!

function countArara(n) {
    var count = [];

    for ( var i = 2; i <= n; i += 2 ) {
      count.push("adak");
    }

    if (n % 2 !== 0) {
        count.push("anane");
    }
    
    return count.join(" ");
}
//-----------------------------------------
Given an array of integers, remove the smallest value. If there are multiple elements with the same value, remove the one with a lower index. If you get an empty array/list, return an empty array/list.

function removeSmallest(numbers) {
  var mIndex;
  var min = numbers[0];
  
  for (var i = 1; i < numbers.length; i++) {
    if (min > numbers[i]) {
      mIndex = i;
      min = numbers[i];
    }
  }
  
  numbers.splice(mIndex, 1);
  
  return numbers;
}

//---------------------------------------------
Callback are function definition

//-----------------------------------------

An isogram is a word that has no repeating letters, consecutive or non-consecutive. Implement a function that determines whether a string that contains only letters is an isogram. 
Assume the empty string is an isogram. Ignore letter case.

// function isIsogram(str) {
// 	// Code here
// 	var splitStr = str.toLowerCase().split('');
// 	for(var i = 0; i < splitStr.length; i++) {
// 		if(splitStr[i] !== splitStr[i + 1]) {
// 			return true;
// 		}
		
// 	}

// 	return false;
// }

// isIsogram("aba");
//--
function isIsogram(str) {
	// Code here
	var splitStr = str.toLowerCase().split('');
	for(var i = 0; i < splitStr.length; i++) {
		if(splitStr.lastIndexOf(splitStr[i]) !== i) {
			return false;
		}
		
	}

	return true;
}

isIsogram("aba");

//-----------------------------------------------------------------------------------
// function sumAll(arr) {
// 	//get the last Number
// 	var total= 0;
// 	for(var i = 0; i < +(arr[1] - arr[0]); i++) {
// 	total += arr[i] ;
// 	arr[i]++;
// 	}
//   	return total;
// }

// sumAll([1, 4]);

// function sumAll(arr){
// 	arr.sort(function(a,b) {return a-b;});
// 	if(arr[0]===arr[i]){
// 		return arr[0];
// 	}
// 	return arr[i] + sumAll
	
// }

function sumAll(arr) {
    var max = Math.max(arr[0], arr[1]);
    var min = Math.min(arr[0], arr[1]);
    var temp = 0;
    for (var i=min; i <= max; i++){
        temp += i;
    }
  return(temp);
}

sumAll([1, 4]);

//---------------------------------------------------------------------------------

You'll be passed an array of objects - you must sort them in descending order based on the value of an arbitrarily specified property. For example, when sorted by a, this:
Sorted:
[
  {a: 1, b: 3},
  {a: 3, b: 2},
  {a: 2, b: 40},
  {a: 4, b: 12}
]
Original:
[
  {a: 4, b: 12},
  {a: 3, b: 2},
  {a: 2, b: 40},
  {a: 1, b: 3}
]
your function must take the form function sortList (sortBy, list)
The values will always be numbers, and the properties will always exist.

function sortList( sortBy, list ) {
	// Code here
	list.sort(function(x, y){
		return x[sortBy] - y[sortBy];
	})
	
	return list;
}

sortList(a, [
  {a: 4, b: 12},
  {a: 3, b: 2},
  {a: 2, b: 40},
  {a: 1, b: 3}
]);

function removeItem(myGroceryList, remItem) {
	for(var i = 0; i < myGroceryList.length; i++){
	if(myGroceryList[i] === remItem){
		myGroceryList.splice(i, 1)
		}
	}
	return myGroceryList;
}

function addItem(myGroceryList, item) {
	for(var i = 0; i < myGroceryList.length; i++) {
		if(myGroceryList[i] === item){
			return myGroceryList;
		}
	}
	myGroceryList.push(item);
	return myGroceryList;
}
//--------------------------------------------------------------------------
var numbers = [5, '9', 16, 19, '25', '34', 48];
//Write a function called addTen that is given 'numbers' as it's only argument and returns a new
//array after adding ten to each item in numbers. *Verify your answer is correct. --> [15, 19, 26, 29, 35, 44, 58]

function addTen(numbers){
	
	for(var i = 0; i < numbers.length; i++){
		numbers[i] = parseInt(numbers[i]);
		numbers[i] += 10;
	}
	return numbers;
}
