var http = require("http");

//create a server object:
http
  .createServer(function(req, res) {
    res.write("Hello World!"); //write a response to the client
    res.end(); //end the response
  })
  .listen(8080); //the server object listens on port 8080

// //   String to Integer (atoi)

// // Input: "42"
// // Output: 42
// // Example 2:

// // Input: "   -42"
// // Output: -42
// // Explanation: The first non-whitespace character is '-', which is the minus sign.
// //              Then take as many numerical digits as possible, which gets 42.

// function aToi(str) {
//   // split string
//   // initital case to return zero
//   // if confition for white space
//   // join remainning caracters d
//   if(typeof(strArr[0]) !== 'number' } || strArr[0] !== '-' strArr[0] !== '+') {
//     return 0
//   }

//   for( let i = 0; i < strArr.length; i++) {
//     if(strArr[i] === ' ') {
//       strArr.split(i, 1)
//     }
//     i++
//   }
//   return strArr.join('');
// }

// function atoi2(str) {
//   const INT_MAX = Math.pow(2, 31) - 1;
//   const INT_MIN = -Math.pow(2, 31);
//   let number = '';

//   str = str.trimStart(); // we remove all whitespace
//   let sign = 1;
//   let counter = 0;

//   if(str.length >= 1 && isNaN(str[0])) {
//     if(str[0] == '-') {
//       counter = 1;
//       sign = -1;
//     } else if (str[0] == '+') {
//       counter = 1
//     }
//   }

//   for(let i = counter; i < str.length; i++) {
//     if (str[i] !== ' ' && !isNaN(str[i])) {
//       number += str[i]
//     } else if(isNaN(str[i]) && !number) {
//       return 0;
//     } else {
//       break;
//     }
//   }

//   if(number * sign > INT_Max) {
//     return INT_MAX;
//   } else if (number * sign < INT_MIN) {
//     return INT_MIN
//   } else {
//     return number * sign
//   }
// }

// ==================================================

//Given two arrays, write a function to compute their intersection.

// Example 1:

// Input: nums1 = [1,2,2,1], nums2 = [2,2]
// Output: [2,2]
// Example 2:

// Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
// Output: [4,9]

// Note:

// Each element in the result should appear as many times as it shows in both arrays.
// The result can be in any order.
// Follow up:

// What if the given array is already sorted? How would you optimize your algorithm?
// What if nums1's size is small compared to nums2's size? Which algorithm is better?
// What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?

// =======================================================================

// binary search in javascript

function binary(list, item) {
  let low = 0;
  let high = list.length - 1;
  let guess = null;
  while (low <= high) {
    // condition for loop
    let mid = (low + high) / 2;
    guess = list[mid];

    if (guess === item) {
      return guess;
    } else if (guess > item) {
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }

  return guess;
}

console.log(binary([1, 3, 5, 7, 9, 13], 7), "dsjkfdsljfs");

// NOT WORKING 
var majorityElement = function(nums) {
  // linear time 
  // keep Track of the recurring amount
  
  const nTimes = nums.length / 3;
  let table = {};
  let result = [];
  
  // have hash table to count each index time
  if(nums.length <= 1) return nums;
  
  for(let i = 0; i < nums.length; i++) {
      console.log(table[nums[i]]);
      if(!table[nums[i]]) {
          table[nums[i]] = 1
          console.log(table);
      } else {
          table[nums[i]] += 1;
          
          
      } 
       console.log('esle -----', table, nTimes);
      if(table[nums[i]] > nTimes && result[0] != nums[i]) {
         
              result.push([nums[i]])
          }
  }
  return result;
};


// CORRECT

var majorityElement = function(nums) {
  const minTimes = nums.length / 3
  
  let result = []
  let hashMap = {}
  
  for(let i = 0; i < nums.length; i++) {
      if(hashMap[nums[i]]) {
          hashMap[nums[i]] ++
      } else {
          hashMap[nums[i]] = 1
      }
      
      if(hashMap[nums[i]] > minTimes && !(result.includes(nums[i]))) {
          result.push(nums[i])
      }
  }
  return result
};

// other way

var majorityElement = function(nums) {
  let set = {};
  let res = [];

  for(let i = 0; i < nums.length; i++) {
    (nums[i] in sets) ? sets[nums[i]] += 1 : sets[nums[i]] = 1;
  }

  Object.keys(sets).forEach(key => {
    if(sets[key] > nums.length/3) res.push(key)
  })

  return res
}

var majorityElement = function(nums) {

  var numsLength=nums.length;
  
  if(numsLength===0)
  {
      return nums;
  }
  
  var hasOb={};
  var result=[];
  
  for(var i=0; i < numsLength; i++)
  {
      if(result.indexOf(nums[i])!==-1)
          continue;
      
      if(!hasOb[nums[i]])
      {
          hasOb[nums[i]]=1;
      }
      else
      {
          hasOb[nums[i]]+=1;
      }
      
      if(hasOb[nums[i]]>Math.floor(numsLength/3))
      {
          result.push(nums[i]);
      }
  }
  
  return result;
  };

  Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, 
  which causes all the following ones to be bad.

  You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. 
  You should minimize the number of calls to the API.

  
  var goodReq = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    
    // implement binary search tree -- starting with the middle
    // if false we go up == if true we check or previous bad
   
    return function(n) {
        let start = 1, end = n
        while(start < end) {
            let mid = Math.floor(start + (end - start) / 2);
            if (isBadVersion(mid)) {
               end = mid
            } else {
                start = mid + 1
            }  
        }
        return start;
        
    };
};

funtion isBadVersion2(isBadVersion) {
  let min = 0,
      max = 0,
      guess


      while(min < max) {
        guess = Math.floor((min + max) /2);
        if (isBadVersion === false) { // means all the previous are correc
            min = guess + 1;
        } else {
          if(isBadVersion(guess -1) === false) {
            return guess;
          } else {
            max = guess - 1
          }
        }
      }
}


